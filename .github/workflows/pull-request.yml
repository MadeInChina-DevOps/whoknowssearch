name: PR workflow

on:
  pull_request_target:
    types: [opened, synchronize]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost/postgres

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Rust/Cargo artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-rust-cargo-${{ hashFiles('**/Cargo.lock', '**/rust-toolchain.toml') }}
          restore-keys: |
            ${{ runner.os }}-rust-cargo-

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: rustfmt, clippy

      - name: Install SQLx CLI
        run: |
          if ! command -v sqlx &> /dev/null; then
            cargo install sqlx-cli --no-default-features --features native-tls,postgres
          else
            echo "SQLx CLI is already installed"
          fi

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            sqlx database create && break
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done

      - name: Run SQLx Migrations
        run: sqlx migrate run
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Run tests
        run: cargo test
