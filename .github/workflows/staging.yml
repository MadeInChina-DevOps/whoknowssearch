name: Deploy to Staging

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost/postgres

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Rust/Cargo artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-rust-cargo-${{ hashFiles('**/Cargo.lock', '**/rust-toolchain.toml') }}
          restore-keys: |
            ${{ runner.os }}-rust-cargo-

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: rustfmt, clippy

      # Run unit tests
      - name: Run Unit and Integration Tests
        run: cargo test

      - name: Install SQLx CLI
        run: |
          if ! command -v sqlx &> /dev/null; then
            cargo install sqlx-cli --no-default-features --features native-tls,postgres
          else
            echo "SQLx CLI is already installed"
          fi

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            sqlx database create && break
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done

      - name: Run SQLx Migrations
        run: sqlx migrate run
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Build the application with deploy.sh
        run: |
          chmod +x deploy.sh
          ./deploy.sh

      - name: Add SSH Private Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Replace files on the remote server
        run: |
          rsync -e "ssh -o StrictHostKeyChecking=no" -az --stats --human-readable --delete --progress ./${{ secrets.PKG }}.tar.gz ${{ secrets.DEPLOY_USER }}@${{ secrets.VM_HOST }}:${{ secrets.STAGING_DIR }}

      - name: Extract and run the app on the VM
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.VM_HOST }} "
            cd ${{ secrets.STAGING_DIR }} &&
            rm -rf migrations templates static ${{ secrets.PKG }} &&
            tar -xzvf ${{ secrets.PKG }}.tar.gz &&
            rm ${{ secrets.PKG }}.tar.gz
          " &&
          ssh ${{ secrets.APP_USER }}@${{ secrets.VM_HOST }} "
            sudo systemctl restart ${{ secrets.SERVICE_NAME_STAGING }}.service
          "

      # Run Postman tests
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh

      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}

      - name: Run API tests
        id: postman_tests
        run: |
          postman collection run "34785392-28b89bc8-68e2-413b-886c-b87b3c6ce4eb" -e "34785392-713f62bd-f13b-4084-ab96-4e97e74e3c54"
